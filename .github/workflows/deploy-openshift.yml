name: Deploy OpenTelemetry Demo to OpenShift

on:
  push:
    branches: [ main, develop, feature-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  # OpenShift cluster details
  OPENSHIFT_SERVER: https://api.rm3.7wse.p1.openshiftapps.com:6443
  OPENSHIFT_NAMESPACE: valaise16-dev
  # Application configuration
  APP_NAME: otel-demo
  CHART_PATH: ./charts/opentelemetry-demo
  VALUES_FILE: ./charts/opentelemetry-demo/ocp-values.yaml

jobs:
  # Validation and testing job
  validate:
    runs-on: ubuntu-latest
    name: Validate Configuration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'
        
    - name: Add Helm repositories
      run: |
        helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add sloth https://slok.github.io/sloth
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        
    - name: Validate Helm chart dependencies
      run: |
        cd ${{ env.CHART_PATH }}
        helm dependency build
        
    - name: Lint Helm chart
      run: |
        helm lint ${{ env.CHART_PATH }} -f ${{ env.VALUES_FILE }}
        
    - name: Validate Kubernetes manifests
      run: |
        helm template ${{ env.APP_NAME }} ${{ env.CHART_PATH }} \
          -f ${{ env.VALUES_FILE }} \
          --namespace ${{ env.OPENSHIFT_NAMESPACE }} > /tmp/manifests.yaml
        echo "Generated manifests:"
        head -50 /tmp/manifests.yaml

  # Security scanning job
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment job for dev environment
  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: "4.14"
        
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'
        
    - name: Login to OpenShift
      run: |
        echo "Logging into OpenShift cluster..."
        oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        oc project ${{ env.OPENSHIFT_NAMESPACE }} || oc new-project ${{ env.OPENSHIFT_NAMESPACE }}
        
    - name: Add Helm repositories
      run: |
        echo "Adding Helm repositories..."
        helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add sloth https://slok.github.io/sloth
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        
    - name: Build Helm dependencies
      run: |
        echo "Building Helm chart dependencies..."
        cd ${{ env.CHART_PATH }}
        helm dependency build
        
    - name: Deploy Tempo (Tracing Backend)
      run: |
        echo "Deploying Tempo for distributed tracing..."
        helm upgrade --install tempo grafana/tempo \
          --namespace ${{ env.OPENSHIFT_NAMESPACE }} \
          --set tempo.persistence.enabled=false \
          --set tempo.storage.trace.backend=local \
          --set tempo.storage.trace.local.path=/tmp/tempo \
          --set securityContext.runAsUser=1012310000 \
          --set securityContext.runAsGroup=1012310000 \
          --set securityContext.fsGroup=1012310000 \
          --set securityContext.runAsNonRoot=true \
          --wait --timeout=5m
          
    - name: Deploy Loki (Logging Backend)
      run: |
        echo "Deploying Loki for log aggregation..."
        helm upgrade --install loki grafana/loki \
          --namespace ${{ env.OPENSHIFT_NAMESPACE }} \
          --set loki.commonConfig.replication_factor=1 \
          --set loki.storage.type=filesystem \
          --set loki.auth_enabled=false \
          --set loki.useTestSchema=true \
          --set singleBinary.replicas=1 \
          --set write.replicas=0 \
          --set read.replicas=0 \
          --set backend.replicas=0 \
          --wait --timeout=5m
          
    - name: Deploy Sloth (SLO Controller)
      run: |
        echo "Deploying Sloth for SLO monitoring..."
        helm upgrade --install sloth sloth/sloth \
          --namespace ${{ env.OPENSHIFT_NAMESPACE }} \
          --set metrics.enabled=false \
          --wait --timeout=3m
          
    - name: Deploy OpenTelemetry Demo
      run: |
        echo "Deploying OpenTelemetry Demo application..."
        helm upgrade --install ${{ env.APP_NAME }} ${{ env.CHART_PATH }} \
          --namespace ${{ env.OPENSHIFT_NAMESPACE }} \
          -f ${{ env.VALUES_FILE }} \
          --wait --timeout=10m
          
    - name: Apply SLO Configurations
      run: |
        echo "Applying SLO configurations..."
        if [ -d "./slo" ]; then
          for slo_file in ./slo/*.yaml; do
            if [ -f "$slo_file" ]; then
              echo "Applying SLO: $slo_file"
              oc apply -f "$slo_file" -n ${{ env.OPENSHIFT_NAMESPACE }}
            fi
          done
        else
          echo "No SLO directory found, skipping SLO deployment"
        fi
        
    - name: Verify Deployment
      run: |
        echo "Verifying deployment status..."
        echo "Checking pods status:"
        oc get pods -n ${{ env.OPENSHIFT_NAMESPACE }} -l app.kubernetes.io/instance=${{ env.APP_NAME }}
        
        echo "Checking services:"
        oc get svc -n ${{ env.OPENSHIFT_NAMESPACE }} -l app.kubernetes.io/instance=${{ env.APP_NAME }}
        
        echo "Checking routes:"
        oc get routes -n ${{ env.OPENSHIFT_NAMESPACE }} || true
        
        echo "Waiting for pods to be ready..."
        oc wait --for=condition=Ready pod -l app.kubernetes.io/instance=${{ env.APP_NAME }} \
          -n ${{ env.OPENSHIFT_NAMESPACE }} --timeout=300s
          
    - name: Run Health Checks
      run: |
        echo "Running application health checks..."
        
        # Check if frontend is accessible via route
        FRONTEND_ROUTE=$(oc get route frontend -n ${{ env.OPENSHIFT_NAMESPACE }} -o jsonpath='{.spec.host}' 2>/dev/null || echo "")
        if [ -n "$FRONTEND_ROUTE" ]; then
          echo "Testing frontend route: https://$FRONTEND_ROUTE"
          curl -f -s -o /dev/null https://$FRONTEND_ROUTE || echo "Frontend health check failed"
        fi
        
        # Check Grafana accessibility
        GRAFANA_ROUTE=$(oc get route grafana -n ${{ env.OPENSHIFT_NAMESPACE }} -o jsonpath='{.spec.host}' 2>/dev/null || echo "")
        if [ -n "$GRAFANA_ROUTE" ]; then
          echo "Testing Grafana route: https://$GRAFANA_ROUTE"
          curl -f -s -o /dev/null https://$GRAFANA_ROUTE || echo "Grafana health check failed"
        fi
        
        # Check collector metrics
        echo "Checking OpenTelemetry Collector logs:"
        oc logs deployment/otel-collector -n ${{ env.OPENSHIFT_NAMESPACE }} --tail=10 || true
        
    - name: Generate Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Development" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** ${{ env.OPENSHIFT_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "**Application:** ${{ env.APP_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Application Status" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        oc get pods -n ${{ env.OPENSHIFT_NAMESPACE }} -l app.kubernetes.io/instance=${{ env.APP_NAME }} >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔗 Access URLs" >> $GITHUB_STEP_SUMMARY
        echo "| Service | URL |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-----|" >> $GITHUB_STEP_SUMMARY
        
        FRONTEND_ROUTE=$(oc get route frontend -n ${{ env.OPENSHIFT_NAMESPACE }} -o jsonpath='{.spec.host}' 2>/dev/null || echo "Not exposed")
        echo "| Frontend | https://$FRONTEND_ROUTE |" >> $GITHUB_STEP_SUMMARY
        
        GRAFANA_ROUTE=$(oc get route grafana -n ${{ env.OPENSHIFT_NAMESPACE }} -o jsonpath='{.spec.host}' 2>/dev/null || echo "Not exposed")
        echo "| Grafana | https://$GRAFANA_ROUTE |" >> $GITHUB_STEP_SUMMARY
        
        PROMETHEUS_ROUTE=$(oc get route prometheus -n ${{ env.OPENSHIFT_NAMESPACE }} -o jsonpath='{.spec.host}' 2>/dev/null || echo "Not exposed")
        echo "| Prometheus | https://$PROMETHEUS_ROUTE |" >> $GITHUB_STEP_SUMMARY

  # Cleanup job for PR deployments
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup PR Environment
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
    - name: Setup OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: "4.14"
        
    - name: Login to OpenShift
      run: |
        oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        
    - name: Cleanup PR resources
      run: |
        PR_NAMESPACE="pr-${{ github.event.number }}"
        if oc get project $PR_NAMESPACE 2>/dev/null; then
          echo "Cleaning up PR environment: $PR_NAMESPACE"
          oc delete project $PR_NAMESPACE
        else
          echo "PR environment $PR_NAMESPACE not found, nothing to cleanup"
        fi

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [deploy-dev]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-dev.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "OpenTelemetry Demo is now running in the development environment."
        
    - name: Notify Failure
      if: needs.deploy-dev.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and retry the deployment."
        exit 1
